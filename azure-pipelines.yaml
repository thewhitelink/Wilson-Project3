name: Azure Pipelines

trigger:
- main

variables:
  python.version: '3.7.6'
  terraform.version: '1.4.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'adoconnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
#--------------------------------------------#  
# PROVISIONING STAGE
#--------------------------------------------# 
- stage: Provisioning
  displayName: Provisioning
  jobs: 
  - job: ProvisioningAppService
    pool: myPool
    displayName: Provisioning AppService
    steps:
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'default'
    #     sshKeySecureFile: 'id_rsa'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          ls /home/_work/_temp/
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '1.4.6'
    - task: TerraformTaskV3@3
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'adoconnection'
        backendAzureRmResourceGroupName: 'project3rg'
        backendAzureRmStorageAccountName: 'sa129107626'
        backendAzureRmContainerName: 'container'
        backendAzureRmKey: 'test.terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    - task: TerraformTaskV3@3
      displayName: Terraform Plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'adoconnection'
    - task: TerraformTaskV3@3
      displayName: Terraform Validate and Apply  
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'adoconnection'
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  displayName: Building
  jobs:
  - job: BuildInfrastructure
    pool: myPool
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.4.6'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'project3rg'
        backendAzureRmStorageAccountName: 'sa129107626'
        backendAzureRmContainerName: 'container'
        backendAzureRmKey: 'test.terraform.tfstate'
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
      #  script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        script: 'newman run TestSuite.Data-Validation.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run StarterAPIs.json -e StarterAPIs.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder:       # ToDo
        mergeTestResults: true
        testRunTitle:       # ToDo
    #--------------------------------------------#
     #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests  

    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)/fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)/fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/Starter.jmx'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '/home/myAgent/_work/1/drop-perftests/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: '/home/myAgent/_work/1/drop-perftests/$(Build.BuildId)-perftests.zip'
      displayName: 'Upload Package'
      artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    pool: myPool    
    environment: '$(environmentName)'   # ToDo
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Visual Studio Enterprise Account(f70deb8c-0341-408c-bc49-bee8e476e697)'     # ToDo
              AppName: 'EQR-AppService'               # ToDo
              appType: webApp
              package: '$(Pipeline.Workspace)/drop-fakerestapi/fakerestapi.zip'       # ToDo: Use the published zip artifact. 
          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          - task: CmdLine@2
            inputs:
              script: |
                wget "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.5.tgz"
                tar -xf apache-jmeter-5.5.tgz
                unzip -o '/home/myAgent/_work/1/drop-perftests/$(Build.BuildId)-perftests.zip'
                ./apache-jmeter-5.5/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeter.log -f
              #  cat jmeter.log  
              workingDirectory: $(Pipeline.Workspace)/s/automatedtesting/jmeter
              #  ./apache-jmeter-5.5/bin/jmeter -n -t StressTest.jmx -JcsvFile=people-100.csv -l stress_results.jtl -j stress.log -e -o stress_report
              #  ./apache-jmeter-5.5/bin/jmeter -n -t EnduranceTest.jmx -JcsvFile=people-100.csv -l endurance_results.jtl -j endurance.log -e -o endurance_report

         

#--------------------------------------------#  
# Test STAGE
#--------------------------------------------#    
- stage: SeleniumDeploy
  jobs:
  - deployment: SeleniumDepends
    pool: myPool
    displayName: Selenium Dependencies
    environment:
      name: '$(environmentName)' #updated
    strategy:
      runOnce:
        deploy:
          
          steps:
          - task: Bash@3
            displayName: 'Install Dependencies'
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash

                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install google-chrome-stable

                cd ~/

                # Install Required Dependencies.
                sudo apt install -y unzip wget libxss1 libappindicator1 libindicator7 xvfb

                # Install Google Chrome.
                sudo wget -O google-chrome-stable_current_amd64.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                sudo dpkg -i google-chrome-stable_current_amd64.deb > /dev/null

                # If there are any dependency errors, fix them with:
                sudo apt --fix-broken install

                # Install ChromeDriver - Replace URL with latest found at https://googlechromelabs.github.io/chrome-for-testing/
                sudo wget -O chromedriver-linux64.zip https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/115.0.5790.170/linux64/chromedriver-linux64.zip
                sudo unzip chromedriver-linux64.zip > /dev/null
                sudo ln -s $PWD/chromedriver-linux64 /usr/local/bin/chromedriver-linux64

                # Move chromedriver to a directory in the system PATH and make executable.
                if [ -d "/usr/bin/chromedriver-linux64" ]; then
                    sudo rm -r /usr/bin/chromedriver-linux64
                fi
                sudo mv -f chromedriver-linux64 /usr/bin/
                sudo chmod +x /usr/bin/chromedriver-linux64
                cd /home

                # Make Agent
                mkdir myAgent;cd myAgent;curl -fkSL -o vstsagent.tar.gz https://vstsagentpackage.azureedge.net/agent/3.225.0/vsts-agent-linux-x64-3.225.0.tar.gz;tar -zxvf vstsagent.tar.gz; if [ -x "$(command -v systemctl)" ]; then ./config.sh --unattended --environment --environmentname "test" --acceptteeeula --agent $HOSTNAME --url https://dev.azure.com/dwilson0779/ --work _work --projectname 'project-3-pipelines' --auth PAT --token qbl5klcpjtl23ihljcbcdul2vwxqun6rzmxr4veot6xkbituu5aa --runasservice; sudo ./bin/installdependencies.sh; sudo ./svc.sh install; sudo ./svc.sh start; else ./config.sh --environment --environmentname "test" --acceptteeeula --agent $HOSTNAME --url https://dev.azure.com/dwilson0779/ --work _work --projectname 'project-3-pipelines' --auth PAT --token qbl5klcpjtl23ihljcbcdul2vwxqun6rzmxr4veot6xkbituu5aa; ./run.sh; fi 

                # Make directory for tests 
                mkdir /home/myAgent/_work/1/drop-uitests/app
                mkdir /home/myAgent/app
                mv /home/myAgent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip /home/myAgent/app
                cd /home/myAgent/app
                unzip -o $(Build.BuildId)-uitests.zip
  
- stage: RunTestingSuite
  jobs:
  - deployment: SeleniumTests
    displayName: Selenium Tests
    environment: 
        name: '$(environmentName)'
        resourceType: VirtualMachine
    strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              displayName: 'Download Selenium'
              artifact: drop-uitests
            - task: Bash@3
              displayName: UI Tests
              inputs:
                targetType: 'inline'
                script: |
                  export PATH=$PATH:/home/myAgent/app/
                  cd /home/myAgent/app
                  echo "Starting Selenium Tests"
                  python3 login.py >> selenium.log
                  echo "Completed Selenium Tests. Check selenium.log for results."
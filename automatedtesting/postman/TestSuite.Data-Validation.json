// {
// 	"info": {
// 		"_postman_id": "fa0388ae-2f53-4ea8-a0c9-eef940bd3640",
// 		"name": "Starter APIs Data Validation",
// 		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
// 	},
// 	"item": [
// 		{
// 			"name": "Validate Author Data",
// 			"event": [
// 				{
// 					"listen": "test",
// 					"script": {
// 						"exec": [
// 							"pm.test(\"Response is not empty\", function () {",
// 							"    pm.response.to.be.ok;",
// 							"});",
// 							"",
// 							"pm.test(\"Response contains valid author data\", function () {",
// 							"    var jsonData = pm.response.json();",
// 							"    pm.expect(jsonData).to.be.an('array');",
// 							"    pm.expect(jsonData[0]).to.have.property('id');",
// 							"    pm.expect(jsonData[0]).to.have.property('idBook');",
// 							"    pm.expect(jsonData[0]).to.have.property('firstName');",
// 							"    pm.expect(jsonData[0]).to.have.property('lastName');",
// 							"});",
// 							"",
// 							"pm.test(\"Status code is 200\", function () {",
// 							"    pm.response.to.have.status(200);",
// 							"});"
// 						],
// 						"type": "text/javascript"
// 					}
// 				}
// 			],
// 			"request": {
// 				"method": "GET",
// 				"header": [],
// 				"url": {
// 					"raw": "http://fakerestapi.azurewebsites.net/api/v1/Authors",
// 					"protocol": "http",
// 					"host": [
// 						"fakerestapi",
// 						"azurewebsites",
// 						"net"
// 					],
// 					"path": [
// 						"api",
// 						"v1",
// 						"Authors"
// 					]
// 				}
// 			},
// 			"response": []

// 		}
// 	]
// }

{
	"info": {
		"_postman_id": "fa0388ae-2f53-4ea8-a0c9-eef940bd3640",
		"name": "Starter APIs Data Validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.title).to.eql(pm.variables.get(\"title\"));",
							"    pm.expect(jsonData.price).to.eql(pm.variables.get(\"price\"));",
							"    pm.expect(jsonData.stock).to.eql(pm.variables.get(\"stock\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{title}}\",\n    \"price\": \"{{price}}\",\n    \"stock\": \"{{stock}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/Authors/add",
					"host": [
						"{{url}}"
					],
					"path": [
						"Authors",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"total\"  : { \"type\": \"number\" },",
							"        \"Authors\"    : { \"type\": \"array\" }",
							"    }",
							"};",
							"",
							"pm.test('Validate schema', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/Authors",
					"host": [
						"{{url}}"
					],
					"path": [
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var json = pm.response.json();",
							"pm.environment.set(\"id\", json.id);",
							"",
							"pm.test(\"Validate Data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"id\"));",
							"    pm.expect(jsonData.title).to.eql(pm.variables.get(\"title\"));",
							"    pm.expect(jsonData.price).to.eql(parseInt(pm.variables.get(\"price\")));",
							"    pm.expect(jsonData.stock).to.eql(parseInt(pm.variables.get(\"stock\")));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/Authors/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"Authors",
						"{{id}}"
					]
				},
				"description": "Get a single employee data"
			},
			"response": []
		},
		{
			"name": "Update Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.title).to.eql(pm.variables.get(\"new_title\"));",
							"    pm.expect(jsonData.price).to.eql(pm.variables.get(\"new_price\"));",
							"    pm.expect(jsonData.stock).to.eql(pm.variables.get(\"new_stock\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{new_title}}\",\n    \"price\": \"{{new_price}}\",\n    \"stock\": \"{{new_stock}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/Authors/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"Authors",
						"{{id}}"
					]
				},
				"description": "Update an employee record"
			},
			"response": []
		},
		{
			"name": "Delete Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.isDeleted).to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/Authors/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"Authors",
						"{{id}}"
					]
				},
				"description": "Delete an employee record"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}